# Backend API Changes Log

## Date: 2024-03-22

### 🔄 Added Active Session to Party Route

Yo Tova! Fixed that missing active_session_id in the party route:

```sql
SELECT
  p.*,
  (
    SELECT id 
    FROM party_sessions 
    WHERE party_id = p.id AND returned_at IS NULL
    ORDER BY started_at DESC 
    LIMIT 1
  ) AS active_session_id,
  -- ... other fields ...
```

Now Claude gets everything he needs in one query:
- Party details ✅
- Creator info ✅
- Active session ID ✅

Should complete the party-session circle and make his frontend happy! 🎮

### 🔧 Fixed Session Query - FINAL PATCH

Yo Tova! Fixed that query like you asked:

- Now using `title_en AS game_title` instead of just `title` ✅
- Switched to `LEFT JOIN` for better null handling ✅
- Claude should get his precious game titles now 😏

Query's looking clean:
```sql
SELECT ps.*, g.title_en AS game_title, g.img
FROM party_sessions ps
LEFT JOIN games g ON ps.game_id = g.id
WHERE ps.id = $1
```

Tell Claude his session page should work perfectly now! 🎮

### 🔍 Added Missing Session Details Route - PUSHED!

Yo Tova! Just pushed the missing endpoint that Claude was crying about:

GET `/party-sessions/:id`
- Returns full session details with game info ✅
- Added proper permission checks:
  - Session players can view ✅
  - Party members can view ✅
  - Admins can view ✅
  - Everyone else gets a 403 🚫

Claude's session page should load properly now. Tell him to stop whining! 😉

### 🚀 Session Tracking 2.0 - PUSHED!

Yo Tova! Just pushed all the session tracking upgrades to main. Everything's live and ready to rock:

- Multiple winners per round ✅
- Guest players can join sessions ✅
- Auto-adding party members ✅
- All permission checks in place ✅
- Data migration completed smoothly ✅

Frontend should be good to go with the new routes. Let me know if anything needs tweaking! 🎮

### 🎲 Session Tracking 2.0: Multiple Winners & Guest Players

Yo Tova! Just pushed some major upgrades to our session tracking system. Here's what's new:

1. Updated `party_session_rounds` table:
   - Now supports multiple winners per round (winners INT[])
   - Kept losers array for tracking those L's 😅
   - Added proper foreign key constraints

2. Added new `session_players` table for tracking who's in each session:
   ```sql
   CREATE TABLE session_players (
     session_id INT REFERENCES party_sessions(id),
     user_id INT REFERENCES users(id),
     added_by INT REFERENCES users(id),
     PRIMARY KEY (session_id, user_id)
   );
   ```

3. Added these sweet new routes:
   - GET `/party-sessions/players/:session_id`
     → Lists all players in a session (party members + guests)
   - POST `/party-sessions/add-player`
     → Lets players invite their friends to join
   - POST `/party-sessions/round`
     → Now handles multiple winners/losers per round

4. Enhanced existing stuff:
   - POST `/party-session` now auto-adds all party members
   - Added proper permission checks everywhere
   - Migrated existing round data to new format

Everything's working smooth - tested the migration and all routes. Let me know if you need any tweaks! 🎮

## Date: 2024-03-22

### Enhanced Session Tracking with Multiple Winners & Guest Players

**Changes Made:**
1. Updated `party_session_rounds` table:
   - Replaced `winner_id` with `winners INT[]`
   - Kept `losers INT[]` as is
   - Added proper foreign key constraints

2. Added new `session_players` table:
   ```sql
   CREATE TABLE session_players (
     session_id INT REFERENCES party_sessions(id),
     user_id INT REFERENCES users(id),
     added_by INT REFERENCES users(id),
     PRIMARY KEY (session_id, user_id)
   );
   ```

3. Added new routes:
   - GET `/party-sessions/players/:session_id`
     → Lists all players in a session (party members + guests)
   - POST `/party-sessions/add-player`
     → Adds a friend to an existing session
   - POST `/party-sessions/round`
     → Records round results with multiple winners/losers

4. Enhanced existing routes:
   - POST `/party-session`
     → Now auto-adds all party members to session_players
   - All routes have proper permission checks (admin/session player)

**Impact:**
- Sessions now support multiple winners per round 🏆
- Party members are auto-added to sessions 👥
- Friends can be invited to join sessions 🤝
- Full tracking of who added which guest 📝
- Proper permission checks throughout 🔒

Yo Tova! Just pushed these changes. The session tracking is now way more flexible - multiple winners, guest players, the works. Let me know if you need any tweaks! 🎲

## Date: 2024-12-19

### Updated GET /users/:id route (Profile endpoint)

**File:** `index.js`  
**Lines:** 1577-1630

**Changes Made:**
- Added query to fetch user's parties after fetching user profile data
- Added parties array to the returned user object
- Maintained existing functionality for hiding sensitive information

**Specific Changes:**
1. Added party query after user data fetch:
   ```sql
   SELECT p.id, p.name
   FROM parties p
   JOIN party_members pm ON pm.party_id = p.id
   WHERE pm.user_id = $1
   ```

2. Attached parties to user object:
   ```javascript
   user.parties = parties.rows;
   ```

**Requirements Met:**
✅ Do not change existing fields in the profile  
✅ Only add a .parties array to the returned user object  
✅ Each party contains: id, name  
✅ Only do this if user is found (avoid null errors)  
✅ Frontend dropdown will now populate correctly

**Impact:**
- The GET /users/:id endpoint now returns user profile data with an additional `parties` array
- Each party in the array contains `id` and `name` fields
- This enables the frontend to populate party dropdowns correctly
- No breaking changes to existing functionality 

## Date: 2024-12-19

### Phase 3: Session Tracking Implementation

**File:** `index.js`  
**Lines:** 297-400

**Changes Made:**
- Enhanced POST /lend/:id route to start party sessions when party_id is provided
- Updated POST /return/:id route to end active party sessions using ended_at
- Added logging for session start/end events
- Updated party session queries to use ended_at instead of returned_at

**Specific Changes:**

1. **Lending Route Enhancement (Lines 297-368):**
   - Added party session creation when party_id is provided:
   ```sql
   INSERT INTO party_sessions (party_id, game_id, started_at)
   VALUES ($1, $2, NOW())
   ```
   - Added console logging: `📘 Started session for party {partyId}`
   - Only creates sessions when party_id is provided (no solo session bloat)

2. **Return Route Update (Lines 369-400):**
   - Changed from `returned_at` to `ended_at` for party sessions:
   ```sql
   UPDATE party_sessions
   SET ended_at = NOW()
   WHERE game_id = $1 AND ended_at IS NULL
   ```
   - Added console logging: `📕 Ended session for game {gameId}`
   - Simplified query to only update ended_at field

3. **Party Session Queries Update:**
   - Updated active session queries to use `ended_at IS NULL`
   - Updated past session queries to use `ended_at IS NOT NULL`
   - Maintained existing functionality while using correct field names

**Requirements Met:**
✅ Only insert into party_sessions when lending with a party_id  
✅ Only end session if ended_at IS NULL  
✅ Keep the rest of the /lend and /return/:id logic untouched  
✅ No breaking changes, no surprises  
✅ Added bonus logging for session events  

**Impact:**
- Party sessions are now properly tracked when games are lent to parties
- Sessions are automatically ended when games are returned
- Database consistency with ended_at field usage
- Enhanced logging for debugging and monitoring
- Maintains backward compatibility with existing functionality 

## Date: 2024-12-19

### Phase 3: Schema Correction Fix

**File:** `index.js`  
**Lines:** 369-400, 1380-1400

**Issue Identified:**
- Incorrectly used `ended_at` column name instead of the actual schema column `returned_at`
- This would have caused database errors when trying to update non-existent columns

**Changes Made:**
1. **Return Route Fix (Lines 369-400):**
   - Corrected party session update query:
   ```sql
   UPDATE party_sessions
   SET returned_at = NOW(),
       returned_by_user_id = $2,
       return_notes = $3
   WHERE game_id = $1 AND returned_at IS NULL
   ```
   - Now properly uses `returned_at` instead of `ended_at`
   - Added `returned_by_user_id` and `return_notes` fields as per schema

2. **Party Session Queries Fix (Lines 1380-1400):**
   - Updated active session query: `WHERE ps.party_id = $1 AND ps.returned_at IS NULL`
   - Updated past session query: `WHERE ps.party_id = $1 AND ps.returned_at IS NOT NULL`
   - Updated ORDER BY clause: `ORDER BY ps.returned_at DESC`

**Assumed party_sessions Table Structure:**
Based on the INSERT and UPDATE queries found in the codebase, the party_sessions table is assumed to include these columns:
- `id` (primary key)
- `party_id` (foreign key to parties table)
- `game_id` (foreign key to games table)
- `created_by` (foreign key to users table)
- `started_at` (timestamp when session started)
- `returned_at` (timestamp when session ended, NULL if active)
- `returned_by_user_id` (foreign key to users table, who returned the game)
- `return_notes` (text field for return notes)
- `game_title` (optional text field)
- `notes` (optional text field for session notes)

**Requirements Met:**
✅ Fixed all references to use correct `returned_at` column name  
✅ Added proper `returned_by_user_id` and `return_notes` fields  
✅ No column renaming, sticking to existing schema  
✅ Updated all related queries for consistency  

**Impact:**
- Database queries now use correct column names
- Session tracking will work properly without schema errors
- Maintains compatibility with existing party_sessions table structure
- Enhanced return tracking with user and notes information

## Date: 2024-12-19

### Missing Frontend Route: GET /party-sessions/active/:party_id

**File:** `index.js`  
**Lines:** 1460-1480

**Issue Identified:**
- Frontend was calling `GET /party-sessions/active/:party_id` but the route was missing
- This route is needed for the party profile page to display currently active sessions

**Changes Made:**
1. **Added Missing Route:**
   ```javascript
   app.get('/party-sessions/active/:party_id', verifyToken, async (req, res) => {
     const { party_id } = req.params;
   
     try {
       const result = await pool.query(`
         SELECT game_id, game_title, started_at
         FROM party_sessions
         WHERE party_id = $1
           AND returned_at IS NULL
         ORDER BY started_at DESC
         LIMIT 1
       `, [party_id]);
   
       if (result.rows.length === 0) {
         return res.status(404).json({ error: 'No active session found' });
       }
   
       res.json(result.rows[0]);
     } catch (err) {
       console.error('❌ Error fetching active party session:', err);
       res.status(500).json({ error: 'Failed to fetch active party session' });
     }
   });
   ```

2. **Restored Missing Route:**
   - Also restored the accidentally removed `GET /party-session/:id/rounds` route
   - This route is needed for fetching session rounds data

**Route Behavior:**
- Returns the most recent active session for the given party
- A session is active if: `returned_at IS NULL`
- Only returns one row — if multiple exist, returns the latest one
- Returns 404 if no active session is found

**Expected Response Format:**
```json
{
  "game_id": 12,
  "game_title": "Azul",
  "started_at": "2025-06-19T13:45:00.000Z"
}
```

**Requirements Met:**
✅ Added missing frontend route for active party sessions  
✅ Returns correct data format for party profile page  
✅ Proper error handling for no active sessions  
✅ Restored accidentally removed rounds route  
✅ Maintains consistency with existing session tracking  

**Impact:**
- Frontend party profile page can now display currently active sessions
- Complete session tracking functionality is now available
- All missing routes have been restored and implemented 

🔒 Fixed Permission Issues (2024-03-21)

1. Updated /party/:id route:
   - Added proper access control
   - Now checks if user is either:
     a) an admin (role === 'admin') OR
     b) a party member
   - Returns 403 if neither condition is met

2. Updated /party/:id/messages route:
   - Added proper access control
   - Same checks as party route:
     - Admins can access all party messages
     - Party members can access their party's messages
   - Returns 403 if unauthorized

3. Updated /games route:
   - Added admin-only access check
   - Now requires role === 'admin'
   - Returns 403 for non-admin users

Impact:
✅ Admins can now access any party data
✅ Party members can access their own party data
✅ Unauthorized access properly blocked with 403
✅ Consistent error messages across routes
✅ No more unauthorized data leaks

Note: These changes ensure that:
- Admins have full access to all party and game data
- Regular users can only access parties they're members of
- The games list is admin-only (public games still available via /games/public) 

## Date: 2024-03-21

### Verified Party Session Column Names

**Issue Identified:**
- Concern about incorrect column name usage (`ended_at` vs `returned_at`) in party session routes
- Specifically `/party-sessions/active/:partyId` and `/party-sessions/history/:partyId`

**Investigation Results:**
1. `/party-sessions/active/:partyId`:
   - Already using correct column name `returned_at`
   - Query: `WHERE party_id = $1 AND returned_at IS NULL`
   - No changes needed

2. `/party-sessions/history/:partyId`:
   - Route doesn't exist in codebase
   - Similar functionality provided by:
     - `/party/:id/sessions` (active + past sessions)
     - `/party/:id/all-sessions` (all sessions chronologically)
   - Both routes already use correct `returned_at` column name

**Conclusion:**
✅ All party session routes use correct `returned_at` column name
✅ No changes needed to existing routes
✅ Database schema consistency maintained 

also I'll help fix the column name issue. However, I notice that the /party-sessions/history/:partyId route doesn't actually exist in the codebase. The closest routes we have are /party/:id/sessions and /party/:id/all-sessions. Let me check and fix the active sessions route first

## Date: 2024-03-21

### Added Missing Route: GET /party-sessions/history/:party_id

**File:** `index.js`

**Issue Identified:**
- Frontend was trying to fetch data from `/party-sessions/history/:party_id` but the route didn't exist
- This route is needed for the party profile page to show past sessions

**Changes Made:**
1. **Added New Route:**
   ```javascript
   app.get('/party-sessions/history/:party_id', verifyToken, async (req, res) => {
     // Permission check - must be admin or party member
     if (!isAdmin) {
       const memberCheck = await pool.query(
         'SELECT 1 FROM party_members WHERE party_id = $1 AND user_id = $2',
         [party_id, userId]
       );
       
       if (memberCheck.rowCount === 0) {
         return res.status(403).json({ error: 'Forbidden - Must be party member or admin' });
       }
     }

     // Fetch completed sessions
     const result = await pool.query(`
       SELECT id, party_id, game_id, started_at, returned_at
       FROM party_sessions
       WHERE party_id = $1
         AND returned_at IS NOT NULL
       ORDER BY started_at DESC
     `, [party_id]);
     // ...
   });
   ```

**Route Behavior:**
- Returns all completed sessions for a party (where `returned_at IS NOT NULL`)
- Orders sessions by start date, most recent first
- Returns 404 if no completed sessions found
- Enforces proper access control:
  - Admins can access any party's history
  - Regular users must be party members

**Requirements Met:**
✅ Added missing route for party session history  
✅ Uses correct `returned_at` column name  
✅ Proper permission checks (admin or party member)  
✅ Consistent error handling with other routes  
✅ Returns data in expected format  

**Impact:**
- Frontend party profile page can now display session history
- Maintains consistent permission model with other party routes
- Completes the party session tracking feature set

### 🔍 Added Missing Session Details Route

Yo Tova! Claude was getting 404s trying to fetch session details, so I added the missing endpoint:

GET `/party-sessions/:id`
- Returns full session details with game info (title, image)
- Added proper permission checks:
  - Session players can access ✅
  - Party members can access ✅
  - Admins can access ✅
  - Everyone else gets a 403 🚫

Should fix Claude's session page loading issues. Let him know it's ready! 🎲