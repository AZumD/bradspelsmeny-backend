# Backend API Changes Log

## Date: 2024-12-19

### Updated GET /users/:id route (Profile endpoint)

**File:** `index.js`  
**Lines:** 1577-1630

**Changes Made:**
- Added query to fetch user's parties after fetching user profile data
- Added parties array to the returned user object
- Maintained existing functionality for hiding sensitive information

**Specific Changes:**
1. Added party query after user data fetch:
   ```sql
   SELECT p.id, p.name
   FROM parties p
   JOIN party_members pm ON pm.party_id = p.id
   WHERE pm.user_id = $1
   ```

2. Attached parties to user object:
   ```javascript
   user.parties = parties.rows;
   ```

**Requirements Met:**
‚úÖ Do not change existing fields in the profile  
‚úÖ Only add a .parties array to the returned user object  
‚úÖ Each party contains: id, name  
‚úÖ Only do this if user is found (avoid null errors)  
‚úÖ Frontend dropdown will now populate correctly

**Impact:**
- The GET /users/:id endpoint now returns user profile data with an additional `parties` array
- Each party in the array contains `id` and `name` fields
- This enables the frontend to populate party dropdowns correctly
- No breaking changes to existing functionality 

## Date: 2024-12-19

### Phase 3: Session Tracking Implementation

**File:** `index.js`  
**Lines:** 297-400

**Changes Made:**
- Enhanced POST /lend/:id route to start party sessions when party_id is provided
- Updated POST /return/:id route to end active party sessions using ended_at
- Added logging for session start/end events
- Updated party session queries to use ended_at instead of returned_at

**Specific Changes:**

1. **Lending Route Enhancement (Lines 297-368):**
   - Added party session creation when party_id is provided:
   ```sql
   INSERT INTO party_sessions (party_id, game_id, started_at)
   VALUES ($1, $2, NOW())
   ```
   - Added console logging: `üìò Started session for party {partyId}`
   - Only creates sessions when party_id is provided (no solo session bloat)

2. **Return Route Update (Lines 369-400):**
   - Changed from `returned_at` to `ended_at` for party sessions:
   ```sql
   UPDATE party_sessions
   SET ended_at = NOW()
   WHERE game_id = $1 AND ended_at IS NULL
   ```
   - Added console logging: `üìï Ended session for game {gameId}`
   - Simplified query to only update ended_at field

3. **Party Session Queries Update:**
   - Updated active session queries to use `ended_at IS NULL`
   - Updated past session queries to use `ended_at IS NOT NULL`
   - Maintained existing functionality while using correct field names

**Requirements Met:**
‚úÖ Only insert into party_sessions when lending with a party_id  
‚úÖ Only end session if ended_at IS NULL  
‚úÖ Keep the rest of the /lend and /return/:id logic untouched  
‚úÖ No breaking changes, no surprises  
‚úÖ Added bonus logging for session events  

**Impact:**
- Party sessions are now properly tracked when games are lent to parties
- Sessions are automatically ended when games are returned
- Database consistency with ended_at field usage
- Enhanced logging for debugging and monitoring
- Maintains backward compatibility with existing functionality 

## Date: 2024-12-19

### Phase 3: Schema Correction Fix

**File:** `index.js`  
**Lines:** 369-400, 1380-1400

**Issue Identified:**
- Incorrectly used `ended_at` column name instead of the actual schema column `returned_at`
- This would have caused database errors when trying to update non-existent columns

**Changes Made:**
1. **Return Route Fix (Lines 369-400):**
   - Corrected party session update query:
   ```sql
   UPDATE party_sessions
   SET returned_at = NOW(),
       returned_by_user_id = $2,
       return_notes = $3
   WHERE game_id = $1 AND returned_at IS NULL
   ```
   - Now properly uses `returned_at` instead of `ended_at`
   - Added `returned_by_user_id` and `return_notes` fields as per schema

2. **Party Session Queries Fix (Lines 1380-1400):**
   - Updated active session query: `WHERE ps.party_id = $1 AND ps.returned_at IS NULL`
   - Updated past session query: `WHERE ps.party_id = $1 AND ps.returned_at IS NOT NULL`
   - Updated ORDER BY clause: `ORDER BY ps.returned_at DESC`

**Assumed party_sessions Table Structure:**
Based on the INSERT and UPDATE queries found in the codebase, the party_sessions table is assumed to include these columns:
- `id` (primary key)
- `party_id` (foreign key to parties table)
- `game_id` (foreign key to games table)
- `created_by` (foreign key to users table)
- `started_at` (timestamp when session started)
- `returned_at` (timestamp when session ended, NULL if active)
- `returned_by_user_id` (foreign key to users table, who returned the game)
- `return_notes` (text field for return notes)
- `game_title` (optional text field)
- `notes` (optional text field for session notes)

**Requirements Met:**
‚úÖ Fixed all references to use correct `returned_at` column name  
‚úÖ Added proper `returned_by_user_id` and `return_notes` fields  
‚úÖ No column renaming, sticking to existing schema  
‚úÖ Updated all related queries for consistency  

**Impact:**
- Database queries now use correct column names
- Session tracking will work properly without schema errors
- Maintains compatibility with existing party_sessions table structure
- Enhanced return tracking with user and notes information

## Date: 2024-12-19

### Missing Frontend Route: GET /party-sessions/active/:party_id

**File:** `index.js`  
**Lines:** 1460-1480

**Issue Identified:**
- Frontend was calling `GET /party-sessions/active/:party_id` but the route was missing
- This route is needed for the party profile page to display currently active sessions

**Changes Made:**
1. **Added Missing Route:**
   ```javascript
   app.get('/party-sessions/active/:party_id', verifyToken, async (req, res) => {
     const { party_id } = req.params;
   
     try {
       const result = await pool.query(`
         SELECT game_id, game_title, started_at
         FROM party_sessions
         WHERE party_id = $1
           AND returned_at IS NULL
         ORDER BY started_at DESC
         LIMIT 1
       `, [party_id]);
   
       if (result.rows.length === 0) {
         return res.status(404).json({ error: 'No active session found' });
       }
   
       res.json(result.rows[0]);
     } catch (err) {
       console.error('‚ùå Error fetching active party session:', err);
       res.status(500).json({ error: 'Failed to fetch active party session' });
     }
   });
   ```

2. **Restored Missing Route:**
   - Also restored the accidentally removed `GET /party-session/:id/rounds` route
   - This route is needed for fetching session rounds data

**Route Behavior:**
- Returns the most recent active session for the given party
- A session is active if: `returned_at IS NULL`
- Only returns one row ‚Äî if multiple exist, returns the latest one
- Returns 404 if no active session is found

**Expected Response Format:**
```json
{
  "game_id": 12,
  "game_title": "Azul",
  "started_at": "2025-06-19T13:45:00.000Z"
}
```

**Requirements Met:**
‚úÖ Added missing frontend route for active party sessions  
‚úÖ Returns correct data format for party profile page  
‚úÖ Proper error handling for no active sessions  
‚úÖ Restored accidentally removed rounds route  
‚úÖ Maintains consistency with existing session tracking  

**Impact:**
- Frontend party profile page can now display currently active sessions
- Complete session tracking functionality is now available
- All missing routes have been restored and implemented 